#!/usr/bin/python3
# psoul: A stupid netsoul client

import argparse
import datetime
import hashlib
import signal
import sys
import socket

class PSoul:

    config = {
            'server_address' : ("ns-server.epita.fr", 4242),
            'login'          : "czegan_g",
            'password'       : "passwd",
            'position'       : "<3".replace(' ', '%20'),
            'data'           : "None".replace(' ', '%20'),

            'verbose'        : False,
            'quiet'          : False
            }

    def __init__(self, login=None, password=None):
        self._alive = False
        self.config['login'] = login or self.config['login']
        self.config['password'] = password or self.config['password']

    def __enter__(self):
        self.connect()
        return self

    def __exit__(self, type, value, traceback):
        if self._alive:
            self.deconnect()

    def die(self, msg):
        if not self.config['quiet']:
            sys.stderr.write("{}: error: {}\n".format(sys.argv[0], msg))
            self.deconnect()

    def connect(self):
        try:
            self.socket = socket.socket(socket.AF_INET)
            self.socket.connect(self.config['server_address'])
        except socket.error as e:
            self.die(e)
        else:
            self._alive = True

    def deconnect(self):
        if self._alive:
            if not self.config['quiet']:
                print("{}: closing connection with {}".format(sys.argv[0], self.config['server_address']))
            self.socket.close()
            self._alive = False

    def authentify(self):

        def md5chunck(salut, socketnb, random_hash, host, port, timestamp):
            chunck = "{}-{}/{}{}".format(random_hash, host, port, self.config['password'])
            return hashlib.md5(chunck.encode()).hexdigest()

        if self._alive:
            if not self.config['quiet']:
                print("{}: opening connection with {}".format(sys.argv[0], self.config['server_address']))
            welcome = self.recv().split()
            self.send("auth_ag ext_user none none\n")
            self.validate()
            login = "{} {}".format(self.config['login'], md5chunck(*welcome))
            self.send("ext_user_log {} {} {}\n".format(login, self.config['data'], self.config['position']))
            self.validate()
            self.send_state("actif")

    def validate(self):
        response = self.recv()
        if not "rep 002 -- cmd end" in response:
            self.die("unexpected response from server: '{}'".format(response.strip('\n')))

    def _print_verbose(self, msg):
        now = datetime.datetime.now().strftime("%H:%M")
        log = "{} :: {}".format(now, msg)
        print(log, end='') if log[-1] == '\n' else print(log)

    def recv(self, size=1024):
        if self._alive:
            try:
                data = self.socket.recv(size).decode()
            except socket.error as e:
                self.die(e)
            if self.config['verbose'] and not self.config['quiet']:
                self._print_verbose("recv: {}".format(data))
            return data

    def send(self, msg):
        if self._alive:
            self.socket.send(msg.encode())
        if self.config['verbose'] and not self.config['quiet']:
            self._print_verbose("send: {}".format(msg))

    def send_state(self, state):
        possible_state = ["actif", "away", "connection", "idle", "lock", "server", "none"]
        if not state in possible_state:
            die("unexpected state: '{}'".format(state))
        self.send("user_cmd state {}\n".format(state))

    def lazyloop(self):
        while self._alive:
            data = self.recv()
            if "ping" in data:
                self.send(data)

def sighandler(signum, frame):
    sys.stdout.write("\r")
    exit(0)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(usage='%(prog)s [OPTIONS] [login] [password]')
    parser.add_argument("-q", "--quiet", action="store_true", help="run silently")
    parser.add_argument("-v", "--verbose", action="store_true", help="explain what being done")
    parser.add_argument("login", nargs='?', help="ionis login (ex: czegan_g)")
    parser.add_argument("password", nargs='?', help="unix password")
    args = parser.parse_args()

    signal.signal(signal.SIGINT, sighandler)
    with PSoul(args.login, args.password) as psoul:
        psoul.config['verbose'] = args.verbose
        psoul.config['quiet'] = args.quiet
        psoul.authentify()
        psoul.lazyloop()
